// <auto-generated />
using System;
using Farming.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Farming.Infrastructure.EF.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Farming.Domain.Entities.Fertilizer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FertilizerRequiredAmountPerHectare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FertilizerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerTypeId");

                    b.ToTable("Fertilizers", (string)null);
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FertilizerTypes", (string)null);
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FertilizerWarehouses", (string)null);
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerWarehouseDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FertilizerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FertilizerWarehouseStateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("RealizationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerId");

                    b.HasIndex("FertilizerWarehouseStateId");

                    b.ToTable("FertilizerWarehouseDeliveries", (string)null);
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerWarehouseState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FertilizerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FertilizerWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerId");

                    b.HasIndex("FertilizerWarehouseId");

                    b.ToTable("FertilizerWarehouseStates", (string)null);
                });

            modelBuilder.Entity("Farming.Domain.Entities.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequiredAmountPerHectare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Plants", (string)null);
                });

            modelBuilder.Entity("FertilizerPlant", b =>
                {
                    b.Property<Guid>("SuitableFertilizersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuitablePlantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuitableFertilizersId", "SuitablePlantsId");

                    b.HasIndex("SuitablePlantsId");

                    b.ToTable("FertilizerPlant");
                });

            modelBuilder.Entity("Farming.Domain.Entities.Fertilizer", b =>
                {
                    b.HasOne("Farming.Domain.Entities.FertilizerType", "FertilizerType")
                        .WithMany("Fertilizers")
                        .HasForeignKey("FertilizerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FertilizerType");
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerWarehouseDelivery", b =>
                {
                    b.HasOne("Farming.Domain.Entities.Fertilizer", "Fertilizer")
                        .WithMany("FertilizerWarehouseDeliveries")
                        .HasForeignKey("FertilizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Farming.Domain.Entities.FertilizerWarehouseState", "FertilizerWarehouseState")
                        .WithMany("FertilizerWarehouseDeliveries")
                        .HasForeignKey("FertilizerWarehouseStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fertilizer");

                    b.Navigation("FertilizerWarehouseState");
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerWarehouseState", b =>
                {
                    b.HasOne("Farming.Domain.Entities.Fertilizer", "Fertilizer")
                        .WithMany("FertilizerWarehouseStates")
                        .HasForeignKey("FertilizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Farming.Domain.Entities.FertilizerWarehouse", "FertilizerWarehouse")
                        .WithMany("States")
                        .HasForeignKey("FertilizerWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fertilizer");

                    b.Navigation("FertilizerWarehouse");
                });

            modelBuilder.Entity("FertilizerPlant", b =>
                {
                    b.HasOne("Farming.Domain.Entities.Fertilizer", null)
                        .WithMany()
                        .HasForeignKey("SuitableFertilizersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Domain.Entities.Plant", null)
                        .WithMany()
                        .HasForeignKey("SuitablePlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Farming.Domain.Entities.Fertilizer", b =>
                {
                    b.Navigation("FertilizerWarehouseDeliveries");

                    b.Navigation("FertilizerWarehouseStates");
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerType", b =>
                {
                    b.Navigation("Fertilizers");
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerWarehouse", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Farming.Domain.Entities.FertilizerWarehouseState", b =>
                {
                    b.Navigation("FertilizerWarehouseDeliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
