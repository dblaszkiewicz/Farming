// <auto-generated />
using System;
using Farming.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Farming.Infrastructure.EF.Migrations.Read
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20221116175006_handleMultitenant")]
    partial class handleMultitenant
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerActionReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FertilizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LandRealizationId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("RealizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerId");

                    b.HasIndex("LandRealizationId");

                    b.HasIndex("UserId");

                    b.ToTable("FertilizerActions");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FertilizerTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RequiredAmountPerHectare")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerTypeId");

                    b.ToTable("Fertilizers");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerTypeReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FertilizerTypes");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerWarehouseDeliveryReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FertilizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FertilizerWarehouseStateId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("RealizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerId");

                    b.HasIndex("FertilizerWarehouseStateId");

                    b.HasIndex("UserId");

                    b.ToTable("FertilizerWarehouseDeliveries");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerWarehouseReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FertilizerWarehouses");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerWarehouseStateReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FertilizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FertilizerReadModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FertilizerWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FertilizerWarehouseReadModelId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerReadModelId");

                    b.HasIndex("FertilizerWarehouseReadModelId");

                    b.ToTable("FertilizerWarehouseStates");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.LandReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric");

                    b.Property<string>("LandClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.LandRealizationReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LandId");

                    b.HasIndex("SeasonId");

                    b.ToTable("LandRealizations");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideActionReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LandRealizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PesticideId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("RealizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LandRealizationId");

                    b.HasIndex("PesticideId");

                    b.HasIndex("UserId");

                    b.ToTable("PesticideActions");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PesticideTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RequiredAmountPerHectare")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PesticideTypeId");

                    b.ToTable("Pesticides");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideTypeReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PesticideTypes");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideWarehouseDeliveryReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PesticideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PesticideWarehouseStateId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("RealizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PesticideId");

                    b.HasIndex("PesticideWarehouseStateId");

                    b.HasIndex("UserId");

                    b.ToTable("PesticideWarehouseDeliveries");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideWarehouseReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PesticideWarehouses");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideWarehouseStateReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PesticideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PesticideWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PesticideWarehouseReadModelId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PesticideId");

                    b.HasIndex("PesticideWarehouseReadModelId");

                    b.ToTable("PesticideWarehouseStates");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantActionReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LandRealizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("RealizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LandRealizationId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantActions");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RequiredAmountPerHectare")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantWarehouseDeliveryReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantWarehouseStateId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("RealizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("PlantWarehouseStateId");

                    b.HasIndex("UserId");

                    b.ToTable("PlantWarehouseDeliveries");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantWarehouseReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PlantWarehouses");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantWarehouseStateReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlantReadModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantWarehouseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlantWarehouseReadModelId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlantReadModelId");

                    b.HasIndex("PlantWarehouseReadModelId");

                    b.ToTable("PlantWarehouseStates");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.SeasonReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FertilizerReadModelPlantReadModel", b =>
                {
                    b.Property<Guid>("SuitableFertilizersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SuitablePlantsId")
                        .HasColumnType("uuid");

                    b.HasKey("SuitableFertilizersId", "SuitablePlantsId");

                    b.HasIndex("SuitablePlantsId");

                    b.ToTable("FertilizerReadModelPlantReadModel");
                });

            modelBuilder.Entity("PesticideReadModelPlantReadModel", b =>
                {
                    b.Property<Guid>("SuitablePesticidesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SuitablePlantsId")
                        .HasColumnType("uuid");

                    b.HasKey("SuitablePesticidesId", "SuitablePlantsId");

                    b.HasIndex("SuitablePlantsId");

                    b.ToTable("PesticideReadModelPlantReadModel");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerActionReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.FertilizerReadModel", "Fertilizer")
                        .WithMany("FertilizerActions")
                        .HasForeignKey("FertilizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.LandRealizationReadModel", "LandRealization")
                        .WithMany("FertilizerActions")
                        .HasForeignKey("LandRealizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.UserReadModel", "User")
                        .WithMany("FertilizerActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fertilizer");

                    b.Navigation("LandRealization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.FertilizerTypeReadModel", "FertilizerType")
                        .WithMany("Fertilizers")
                        .HasForeignKey("FertilizerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FertilizerType");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerWarehouseDeliveryReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.FertilizerReadModel", "Fertilizer")
                        .WithMany("FertilizerWarehouseDeliveries")
                        .HasForeignKey("FertilizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.FertilizerWarehouseStateReadModel", "FertilizerWarehouseState")
                        .WithMany("FertilizerWarehouseDeliveries")
                        .HasForeignKey("FertilizerWarehouseStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.UserReadModel", "User")
                        .WithMany("FertilizerDeliveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fertilizer");

                    b.Navigation("FertilizerWarehouseState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerWarehouseStateReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.FertilizerReadModel", null)
                        .WithMany("FertilizerWarehouseStates")
                        .HasForeignKey("FertilizerReadModelId");

                    b.HasOne("Farming.Infrastructure.EF.Models.FertilizerWarehouseReadModel", null)
                        .WithMany("States")
                        .HasForeignKey("FertilizerWarehouseReadModelId");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.LandRealizationReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.LandReadModel", "Land")
                        .WithMany("LandRealizations")
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.SeasonReadModel", "Season")
                        .WithMany("LandRealizations")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideActionReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.LandRealizationReadModel", "LandRealization")
                        .WithMany("PesticideActions")
                        .HasForeignKey("LandRealizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.PesticideReadModel", "Pesticide")
                        .WithMany("PesticideActions")
                        .HasForeignKey("PesticideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.UserReadModel", "User")
                        .WithMany("PesticideActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LandRealization");

                    b.Navigation("Pesticide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.PesticideTypeReadModel", "PesticideType")
                        .WithMany("Pesticides")
                        .HasForeignKey("PesticideTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PesticideType");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideWarehouseDeliveryReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.PesticideReadModel", "Pesticide")
                        .WithMany("PesticideWarehouseDeliveries")
                        .HasForeignKey("PesticideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.PesticideWarehouseStateReadModel", "PesticideWarehouseState")
                        .WithMany("PesticideWarehouseDeliveries")
                        .HasForeignKey("PesticideWarehouseStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.UserReadModel", "User")
                        .WithMany("PesticideDeliveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pesticide");

                    b.Navigation("PesticideWarehouseState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideWarehouseStateReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.PesticideReadModel", "Pesticide")
                        .WithMany("PesticideWarehouseStates")
                        .HasForeignKey("PesticideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.PesticideWarehouseReadModel", null)
                        .WithMany("States")
                        .HasForeignKey("PesticideWarehouseReadModelId");

                    b.Navigation("Pesticide");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantActionReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.LandRealizationReadModel", "LandRealization")
                        .WithMany("PlantActions")
                        .HasForeignKey("LandRealizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.PlantReadModel", "Plant")
                        .WithMany("PlantActions")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.UserReadModel", "User")
                        .WithMany("PlantActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LandRealization");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantWarehouseDeliveryReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.PlantReadModel", "Plant")
                        .WithMany("PlantWarehouseDeliveries")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.PlantWarehouseStateReadModel", "PlantWarehouseState")
                        .WithMany("PlantWarehouseDeliveries")
                        .HasForeignKey("PlantWarehouseStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.UserReadModel", "User")
                        .WithMany("PlantDeliveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("PlantWarehouseState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantWarehouseStateReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.PlantReadModel", null)
                        .WithMany("PlantWarehouseStates")
                        .HasForeignKey("PlantReadModelId");

                    b.HasOne("Farming.Infrastructure.EF.Models.PlantWarehouseReadModel", null)
                        .WithMany("States")
                        .HasForeignKey("PlantWarehouseReadModelId");
                });

            modelBuilder.Entity("FertilizerReadModelPlantReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.FertilizerReadModel", null)
                        .WithMany()
                        .HasForeignKey("SuitableFertilizersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.PlantReadModel", null)
                        .WithMany()
                        .HasForeignKey("SuitablePlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PesticideReadModelPlantReadModel", b =>
                {
                    b.HasOne("Farming.Infrastructure.EF.Models.PesticideReadModel", null)
                        .WithMany()
                        .HasForeignKey("SuitablePesticidesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Farming.Infrastructure.EF.Models.PlantReadModel", null)
                        .WithMany()
                        .HasForeignKey("SuitablePlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerReadModel", b =>
                {
                    b.Navigation("FertilizerActions");

                    b.Navigation("FertilizerWarehouseDeliveries");

                    b.Navigation("FertilizerWarehouseStates");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerTypeReadModel", b =>
                {
                    b.Navigation("Fertilizers");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerWarehouseReadModel", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.FertilizerWarehouseStateReadModel", b =>
                {
                    b.Navigation("FertilizerWarehouseDeliveries");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.LandReadModel", b =>
                {
                    b.Navigation("LandRealizations");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.LandRealizationReadModel", b =>
                {
                    b.Navigation("FertilizerActions");

                    b.Navigation("PesticideActions");

                    b.Navigation("PlantActions");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideReadModel", b =>
                {
                    b.Navigation("PesticideActions");

                    b.Navigation("PesticideWarehouseDeliveries");

                    b.Navigation("PesticideWarehouseStates");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideTypeReadModel", b =>
                {
                    b.Navigation("Pesticides");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideWarehouseReadModel", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PesticideWarehouseStateReadModel", b =>
                {
                    b.Navigation("PesticideWarehouseDeliveries");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantReadModel", b =>
                {
                    b.Navigation("PlantActions");

                    b.Navigation("PlantWarehouseDeliveries");

                    b.Navigation("PlantWarehouseStates");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantWarehouseReadModel", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.PlantWarehouseStateReadModel", b =>
                {
                    b.Navigation("PlantWarehouseDeliveries");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.SeasonReadModel", b =>
                {
                    b.Navigation("LandRealizations");
                });

            modelBuilder.Entity("Farming.Infrastructure.EF.Models.UserReadModel", b =>
                {
                    b.Navigation("FertilizerActions");

                    b.Navigation("FertilizerDeliveries");

                    b.Navigation("PesticideActions");

                    b.Navigation("PesticideDeliveries");

                    b.Navigation("PlantActions");

                    b.Navigation("PlantDeliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
